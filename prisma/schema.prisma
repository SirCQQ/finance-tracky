// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth

//Enums
enum CurrencyEnum {
    EUR
    RON
    USD

    @@map("Currency")
}

enum FinanceTypeEnum {
    Household
    SavingAccount
    Investments

    @@map("FinanceType")
}

// This is the providers info for a user, each user can have multiple Accounts to multiple providers
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Data base user
model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?      @map("email_verified")
    image         String?
    firstName     String?        @map("first_name")
    lastName      String?        @map("last_name")
    username      String?
    //Relations
    accounts      Account[]
    sessions      Session[]
    incomes       Incomes[]
    expenses      Expenses[]
    UserFinances  UserFinances[]
    Finance       Finance[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Finance {
    id               String          @id @default(cuid())
    name             String
    createdAt        DateTime        @default(now()) @map("created_at")
    updatedAt        DateTime        @updatedAt @map("updated_at")
    isDeleted        Boolean         @default(false) @map("is_deleted")
    currency         CurrencyEnum?   @default(RON)
    financeSituation Int             @default(0) @map("finance_situation")
    description      String?
    type             FinanceTypeEnum @default(Household)
    //Relations 
    ownerId          String
    owner            User            @relation(fields: [ownerId], references: [id])
    incomes          Incomes[]
    expenses         Expenses[]
    UserFinances     UserFinances[]
}

model UserFinances {
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    financeId String
    finance   Finance @relation(fields: [financeId], references: [id])

    @@unique([userId, financeId])
}

model Incomes {
    id             String       @id @default(cuid())
    name           String
    amount         Int
    currency       CurrencyEnum @default(RON)
    receivedDate   DateTime     @map("received_date")
    createdAt      DateTime     @default(now()) @map("created_at")
    updatedAt      DateTime     @updatedAt @map("updated_at")
    isRecurrent    Boolean      @default(false) @map("is_recurrent")
    recurrenceDate DateTime?    @map("recurrence_date")

    //Relations 
    financeId String  @map("finance_id")
    finance   Finance @relation(fields: [financeId], references: [id])
    userId    String  @map("user_id")
    user      User    @relation(fields: [userId], references: [id])
}

model Expenses {
    id             String       @id
    name           String
    amount         Int
    currency       CurrencyEnum @default(RON)
    paidDate       DateTime     @map("paid_date")
    createdAt      DateTime     @default(now()) @map("created_at")
    updatedAt      DateTime     @updatedAt @map("updated_at")
    isRecurrent    Boolean      @default(false) @map("is_recurrent")
    recurrenceDate DateTime?    @map("recurrence_date")

    //Relations 
    financeId String  @map("finance_id")
    finance   Finance @relation(fields: [financeId], references: [id])
    userId    String  @map("user_id")
    user      User    @relation(fields: [userId], references: [id])
}
